import Foundation
@testable import Coordinator;

/// NOTE: This file is not autogenerated since is a mock that conforms to two protocols.
///       It act as service and context provider.

/// This context mock is the type use by the Context provider service mock below.
struct ContextMock: Coordinator.CoordinatorContext, Equatable { }

/// This mock represets a services that is also a Context Provider.
/// It can be used to check how the coordinator handles the context provider service
/// to server the context to any manager.
final class ContextProviderServiceProtocolMock: CoordinatorServiceProtocol, ContextProviderProtocol {

    //MARK: - ContextProviderProtocol

    var contextReturnValue: ContextMock?
    var contextCallsCount = 0
    var contextCalled: Bool { contextCallsCount > 0 }
    var contextClosure: (() -> Void)?
    func context() -> ContextMock?
    {
        contextCallsCount += 1
        contextClosure?()
        return contextReturnValue
    }

    var refreshContextReturnValue: ContextMock!
    var refreshContextCallsCount = 0
    var refreshContextCalled: Bool { contextCallsCount > 0 }
    var refreshContextClosure: (() -> Void)?
    func refreshContext() async throws -> ContextMock {
        refreshContextCallsCount += 1
        refreshContextClosure?()
        return refreshContextReturnValue
    }

    var coordinator: CoordinationRequestProtocol?

    //MARK: - attendToLocalNotification

    var attendToLocalNotificationIdentifierCallsCount = 0
    var attendToLocalNotificationIdentifierCalled: Bool {
        return attendToLocalNotificationIdentifierCallsCount > 0
    }
    var attendToLocalNotificationIdentifierReceivedIdentifier: String?
    var attendToLocalNotificationIdentifierReceivedInvocations: [String] = []
    var attendToLocalNotificationIdentifierClosure: ((String) -> Void)?

    func attendToLocalNotification(identifier: String) {
        attendToLocalNotificationIdentifierCallsCount += 1
        attendToLocalNotificationIdentifierReceivedIdentifier = identifier
        attendToLocalNotificationIdentifierReceivedInvocations.append(identifier)
        attendToLocalNotificationIdentifierClosure?(identifier)
    }

    //MARK: - start

    var startCallsCount = 0
    var startCalled: Bool {
        return startCallsCount > 0
    }
    var startClosure: (() -> Void)?

    func start() {
        startCallsCount += 1
        startClosure?()
    }

    //MARK: - stop

    var stopCallsCount = 0
    var stopCalled: Bool {
        return stopCallsCount > 0
    }
    var stopClosure: (() -> Void)?

    func stop() {
        stopCallsCount += 1
        stopClosure?()
    }
}
